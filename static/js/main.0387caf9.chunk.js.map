{"version":3,"sources":["components/QuoteBox/QuoteBox.js","components/App/App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","initialQuote","randomQuote","state","quote","author","handleClick","bind","randomIndex","Math","floor","random","QuotesList","length","newQuote","this","setState","tweetURL","id","className","rel","target","href","onClick","variant","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4VA6CeA,E,kDAxCX,WAAYC,GAAQ,IAAD,sBAEf,IAAIC,GADJ,cAAMD,IACkBE,cAFT,OAGf,EAAKC,MAAQ,CACTC,MAAOH,EAAaG,MACpBC,OAAQJ,EAAaI,QAEzB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPJ,E,0DAWf,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWC,EAAWC,QACxD,OAAOD,EAAWJ,K,oCAIlB,IAAIM,EAAWC,KAAKb,cACpBa,KAAKC,SAAS,CACVZ,MAAOU,EAASV,MAChBC,OAAQS,EAAST,W,+BAKrB,IAAMY,EAAQ,iDAA6CF,KAAKZ,MAAMC,MAAxD,eAAoEW,KAAKZ,MAAME,QAC7F,OACI,yBAAKa,GAAG,YAAYC,UAAU,8FAC1B,yBAAKD,GAAG,YAAYC,UAAU,6CAC1B,wBAAID,GAAG,OAAOC,UAAU,qBAAoB,uBAAGA,UAAU,qBAAsBJ,KAAKZ,MAAMC,OAC1F,uBAAGc,GAAG,SAASC,UAAU,8BAAzB,KAAyDJ,KAAKZ,MAAME,QACpE,yBAAKc,UAAU,2CACX,uBAAGA,UAAU,sCAAsCD,GAAG,cAAcE,IAAI,sBAAsBC,OAAO,SAASC,KAAML,GAAU,uBAAGE,UAAU,kBAA3I,qBACA,4BAAQI,QAASR,KAAKT,YAAaa,UAAU,sCAAsCK,QAAQ,QAAQN,GAAG,aAAY,uBAAGC,UAAU,iBAA/H,qB,GAjCDM,IAAMC,WCQdC,E,uKANX,OACE,kBAAC,EAAD,U,GAHYF,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAUC,6BAChB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0387caf9.chunk.js","sourcesContent":["import React from 'react';\nimport './QuoteBox.css';\nimport QuotesList from '../QuoteBox/QuotesList.json';\n\nclass QuoteBox extends React.Component {\n    constructor(props) {\n        super(props);\n        let initialQuote = this.randomQuote();\n        this.state = {\n            quote: initialQuote.quote,\n            author: initialQuote.author\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n    // get a random quote\n    randomQuote() {\n        let randomIndex = Math.floor(Math.random() * QuotesList.length);\n        return QuotesList[randomIndex];\n    }\n    // handle clicks\n    handleClick() {\n        let newQuote = this.randomQuote();\n        this.setState({\n            quote: newQuote.quote,\n            author: newQuote.author\n        });\n    }\n    // render the final quote box\n    render () {\n        const tweetURL = `https://twitter.com/intent/tweet?text=\"${this.state.quote}\" - ${this.state.author}`;\n        return (\n            <div id=\"container\" className=\"container-xs d-flex justify-content-center align-items-center vh-100 mt-md-3 overflow-auto\">\n                <div id=\"quote-box\" className=\"col-md-6 p-4 d-flex flex-column text-info\">\n                    <h2 id=\"text\" className=\"d-block text-left\"><i className=\"fa fa-quote-left\" />{this.state.quote}</h2>\n                    <p id=\"author\" className=\"align-self-end font-italic\">- {this.state.author}</p>\n                    <div className=\"d-flex justify-content-center btn-group\">\n                        <a className=\"btn btn-info font-weight-bold col-6\" id=\"tweet-quote\" rel=\"noopener noreferrer\" target=\"_blank\" href={tweetURL}><i className=\"fa fa-twitter\" /> Share this quote</a>\n                        <button onClick={this.handleClick} className=\"btn btn-info font-weight-bold col-6\" variant=\"light\" id=\"new-quote\"><i className=\"fa fa-random\" /> New quote</button>\n                    </div>\n                </div>\n            </div>  \n        );\n    }\n}\n\nexport default QuoteBox;","import React from 'react';\nimport './App.css';\nimport QuoteBox from '../QuoteBox/QuoteBox';\n\nclass App extends React.Component {  \n  render() {\n    return (\n      <QuoteBox />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}